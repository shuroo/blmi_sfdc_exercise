public class LoanRequestHelper {
    public static void handleLoanUpdates(List<Loan_Request__c> loanRequests, Map<Id, Loan_Request__c> oldLoanRequestsMap) {
        List<Task> tasksToInsert = new List<Task>();
        List<DeclinedLoanReport__c> reportsToInsert = new List<DeclinedLoanReport__c>();
        List<LoanHistory__c> historyToInsert = new List<LoanHistory__c>();

        for (Loan_Request__c loanRequest : loanRequests) {
            // Handle high loan amount tasks
            if (loanRequest.LoanAmount__c > 250000 && oldLoanRequestsMap.get(loanRequest.Id).LoanAmount__c < 250000) {
               Task newTask = new Task(
                    WhatId = loanRequest.Id,
                    OwnerId = loanRequest.OwnerId,
                    Subject = 'High Loan Amount Review',
                    Description = 'Customer: ' + loanRequest.Customer__c + 
                                  ', Amount: ' + loanRequest.LoanAmount__c + 
                                  ', Date: ' + Date.today()
                );
                tasksToInsert.add(newTask);
            } 
            
           
            // Handle rejected loans
            else if (loanRequest.LoanStatus__c == 'Rejected' && oldLoanRequestsMap.get(loanRequest.Id).LoanStatus__c != 'Rejected') {
                createDeclinedReport(loanRequest,reportsToInsert);
                
            }
            // Check if LoanStatus changed to 'Approved'
            if (loanRequest.LoanStatus__c == 'Approved' && 
                oldLoanRequestsMap.get(loanRequest.Id).LoanStatus__c != 'Approved') {
                LoanHistory__c historyRecord = new LoanHistory__c(
                    Customer__c = loanRequest.Customer__c,
                    LoanAmount__c = loanRequest.LoanAmount__c,
                    Date__c = Date.today(),
                    LoanStatus__c = loanRequest.LoanStatus__c
                );
                historyToInsert.add(historyRecord);
            }
        }

        // Bulk insert operations
        if (!tasksToInsert.isEmpty()) {
            insert tasksToInsert;    
        }
        if (!reportsToInsert.isEmpty()) {
            insert reportsToInsert;
        }
        if (!historyToInsert.isEmpty()) {
            insert historyToInsert;
        } 
    }
    
    public static void createDeclinedReport(Loan_Request__c loanRequest,List<DeclinedLoanReport__c> reportsToInsert) {
        DeclinedLoanReport__c report = new DeclinedLoanReport__c(
                    Loan_Request__c = loanRequest.Id,
                    RejectionReason__c = 'Insufficient Credit',
                    Customer__c = loanRequest.Customer__c,
                    LoanAmount__c = loanRequest.LoanAmount__c,
                    Date__c = Date.today()
                );
                reportsToInsert.add(report);
    }
    
    
    /**
     * Optionally adds tasks for high loan amounts, or DeclinedLoanReport for rejected loan
     *
     * @param loanRequests The list of loan requests to evaluate for high loan amounts.
     */
    public static void optionallyAddTasksOrReport(List<Loan_Request__c> loanRequests) {
        List<Task> tasksToInsert = new List<Task>();
        List<DeclinedLoanReport__c> reportsToInsert = new List<DeclinedLoanReport__c>();
        for (Loan_Request__c loanRequest : loanRequests) {
            // Handle high loan amount tasks
            if (loanRequest.LoanAmount__c > 250000) {
                Task newTask = new Task(
                    WhatId = loanRequest.Id,
                    OwnerId = loanRequest.OwnerId,
                    Subject = 'High Loan Amount Review',
                    Description = 'Customer: ' + loanRequest.Customer__c + 
                                  ', Amount: ' + loanRequest.LoanAmount__c + 
                                  ', Date: ' + Date.today()
                );
                tasksToInsert.add(newTask);
            } 
            else if (loanRequest.LoanStatus__c == 'Rejected') { 
                  createDeclinedReport(loanRequest,reportsToInsert);
            }
        }
        
        if (!tasksToInsert.isEmpty()) {
            insert tasksToInsert;
        }
        if (!reportsToInsert.isEmpty()) {
            insert reportsToInsert;
        }
    }
  
    /**
     * Handles loan inserts by calling methods to add tasks for high loans.
     *
     * @param loanRequests The list of loan requests being inserted.
     */
    public static void handleLoanInserts(List<Loan_Request__c> loanRequests) {
        optionallyAddTasksOrReport(loanRequests);
    }
}